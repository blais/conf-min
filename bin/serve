#!/usr/bin/env python3
"""Serve files from a directory.
"""
__author__ = 'Martin Blais <blais@furius.ca>'

import argparse
import functools
import os
import http.server
import sys
from unittest import mock


class HTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """Request handler with expiring cache."""

    def end_headers(self):
        self.send_nocache_headers()
        super().end_headers()

    def send_nocache_headers(self):
        self.send_header("Cache-Control", "no-cache, no-store, must-revalidate")
        self.send_header("Pragma", "no-cache")
        self.send_header("Expires", "0")

    def list_directory(self, path):
        if hasattr(self.server, "filenames"):
            if os.getcwd() == os.path.normpath(path):
                with mock.patch('os.listdir', return_value=self.server.filenames):
                    return super().list_directory(path)
        return super().list_directory(path)


def make_server(filenames, *args):
    server = http.server.HTTPServer(*args)
    server.filenames = filenames
    return server


def main():
    parser = argparse.ArgumentParser(description=__doc__.strip())

    parser.add_argument('root', nargs='?',
                        help='Directory to serve')

    parser.add_argument('-p', '--port', action='store',
                        type=int, default=8000,
                        help="Port to listen on")

    parser.add_argument('-f', '--filenames', action='store',
                        default=None,
                        help="Read the list of files to serve in the given filename")

    args = parser.parse_args()

    if args.root:
        os.chdir(args.root)

    if args.filenames:
        fileobj = sys.stdin if args.filenames == '-' else open(args.filenames)
        filenames = [x.strip() for x in fileobj.readlines()]
        server_class = functools.partial(make_server, filenames)
    else:
        server_class = http.server.HTTPServer

    for port in range(args.port, args.port + 100):
        try:
            http.server.test(HandlerClass=HTTPRequestHandler,
                             ServerClass=server_class,
                             port=port)
        except OSError as exc:
            if exc.errno != 98:
                raise
            else:
                print("{}; skipping port {}".format(exc, port))


if __name__ == '__main__':
    main()
