#!/usr/bin/env python3
"""Normalize ordering in two CSV files and run diff on them.

This script
- Removes columns with no header
- Reorders the right file's columns to match that of the left file
- Optioally sorts the rows by a given key
"""
__copyright__ = 'Copyright (C) 2021-2022 Martin Blais. All Rights Reserved.'
__author__ = 'Martin Blais <blais@furius.ca>'

import argparse
import io
import subprocess
import tempfile
from typing import Optional, Tuple, List

import petl
petl.config.look_style = 'minimal'
petl.config.failonerror = True


def read_file(filename: str, key: Optional[str]) -> Tuple[petl.Table, List[str]]:
    table = petl.fromcsv(filename)
    header = table.fieldnames()
    indices = [index for index, col in enumerate(header) if not col]
    columns = [col for col in header if col]
    table = table.cutout(*indices)
    table = table.sort(key)
    return table, columns


def main():
    parser = argparse.ArgumentParser(description=__doc__.strip())

    parser.add_argument('left', help='Left filename')
    parser.add_argument('right', help='Right filename')

    parser.add_argument('-d', '--diff-command', default='diff', action='store',
                        help="Diff program to run.")

    parser.add_argument('-k', '--key', action='store',
                        help="Key column to sort by.")

    args = parser.parse_args()

    with tempfile.NamedTemporaryFile(mode='w', suffix='.left') as left_file:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.right') as right_file:

            left_table, left_header = read_file(args.left, args.key)
            if args.key:
                left_table = left_table.sort(args.key)

            print(left_table.lookallstr(), file=left_file)
            left_file.flush()

            right_table, right_header = read_file(args.right, args.key)

            new_header = []
            for col in left_header:
                try:
                    right_header.remove(col)
                except ValueError:
                    pass
                else:
                    new_header.append(col)
            new_header.extend(col for col in right_header if col)

            right_table = right_table.cut(new_header)
            print(right_table.lookallstr(), file=right_file)
            right_file.flush()

            command = [args.diff_command, left_file.name, right_file.name]
            subprocess.call(command, shell=False)


if __name__ == '__main__':
    main()
