#!/usr/bin/env python3
"""Wait until the argument file's timestamp changes.

This acts like a barrier, polling a filename's mtime until it changes.
You can also specify a timeout.
"""
__author__ = 'Martin Blais <blais@furius.ca>'

import argparse
import os
import sys
import time
from os import path


def loop_until_changed(filename, poll_interval_secs, timeout_secs):
    """Loop and wait until the given filename has changed.

    Args:
      filename: A string, the name of the file that has changed.
      poll_interval_secs: A float, the number of seconds to wait between each
        check.
      timeout_secs: A float, the number of seconds to timeout after.
    Returns:
      True if timedout; None on successful detected change.
    """
    # The initial mtime of the target file
    initial_mtime = (path.getmtime(filename) if path.exists(filename) else 0)

    # The timeout time, if specific.
    timeout_time = (time.time() + timeout_secs if timeout_secs else None)

    # Wait until we timed out or the mtime on the file chnaged.
    while timeout_time is None or time.time() < timeout_time:
        mtime = (path.getmtime(filename) if path.exists(filename) else 0)
        if mtime != initial_mtime:
            break
        time.sleep(poll_interval_secs)
    else:
        return True


def wait_stable(filename, stable_secs, timeout_secs):
    """Poll the file size and wait until it's stable for some seconds.

    Args:
      filename: A string, the name of the file that has changed.
      stable_secs: A float, the number of seconds to wait for stable size.
      timeout_secs: A float, the number of seconds to timeout after.
    Returns:
      An integer, the size in bytes of the file (0 if non-existent).
      None if timed out.
    """
    poll_secs = stable_secs / 4.0
    timeout_time = time.time() + timeout_secs
    size = None
    old_size, old_time = None, 0.0
    while True:
        time_now = time.time()
        if time_now > timeout_time:
            size = None
            break
        try:
            size = path.getsize(filename)
        except OSError:
            size = None
        print('size/old_size', filename, size, old_size)
        if size:
            if size != old_size:
                old_size, old_time = size, time_now
                print('old (size/time)', old_size, old_time)
            elif time_now - old_time >= stable_secs:
                print('good delay', time_now - old_time, size)
                break
        time.sleep(poll_secs)
    return size


def main():
    parser = argparse.ArgumentParser(description=__doc__.strip())

    parser.add_argument('filename', help='The name of the file to monitor')

    parser.add_argument('rest', nargs=argparse.REMAINDER,
                        help='The rest of the arguments')

    parser.add_argument('-n', '--dont-run',
                        dest='run', action='store_false', default=True,
                        help=("Don't run the arguments as a command after "
                              "detecting a change"))

    parser.add_argument('-t', '--timeout',
                        action='store', type=float, default=0,
                        help=("Number of seconds to timeout if the file does "
                              "not become recent."))

    parser.add_argument('-p', '--poll-interval',
                        action='store', type=float, default=0.5,
                        help="Number of seconds to wait between each poll.")

    parser.add_argument('-s', '--stable-interval',
                        action='store', type=float, default=1.0,
                        help=("Number of seconds to wait for a stable file "
                              "size before running a command."))

    args = parser.parse_args()

    if loop_until_changed(args.filename, args.poll_interval, args.timeout):
        sys.stderr.write('wait-recent: timedout\n')
        sys.exit(1)
    else:
        if args.run:
            size = wait_stable(args.filename, args.stable_interval,
                               args.poll_interval * 10)
            if size is None:
                sys.stderr.write('wait-recent: timedout on stability\n')
                sys.exit(1)
            elif size == 0:
                sys.stderr.write('wait-recent: file gone\n')
                sys.exit(1)
            else:
                command = [args.filename] + args.rest
                sys.stdout.write('wait-recent: detected; running {}\n'.format(
                    ' '.join(command)))
                os.execv(args.filename, command)
        else:
            sys.exit(0)


if __name__ == '__main__':
    main()
