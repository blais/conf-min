#!/usr/bin/env python3
"""Idify (fixup) filenames. Optionally date in front of them.
"""
__author__ = "Martin Blais <blais@furius.ca>"

from datetime import date
from os import path
from typing import Tuple, List
import argparse
import datetime
import logging
import os
import re
import string


SFROM = "áâàäãéêèëíîìïóôòöõúûùüçøñÁÂÀÄÉÊÈËÍÎÌÏÓÔÒÖÚÛÙÜÇØÑ¡¿"
STO = "aaaaaeeeeiiiiooooouuuuconAAAAEEEEIIIIOOOOUUUUCON!?"
RATBL = str.maketrans(SFROM, STO)


def remove_accents(string: str) -> str:
    """Remove accents from a string."""
    if isinstance(string, bytes):
        string = string.encode("utf8")
    return string.translate(RATBL)


def splitext_safe(fn: str) -> Tuple[str, str]:
    """Split the extension, handle multiple extensions with special characters."""
    base, ext = os.path.splitext(fn)
    if re.match(r"\.[a-z0-9_]+", ext, re.I):
        return base, ext
    else:
        return fn, None


def idify(string: str, strip: bool = True, preserve_chars: List[str] = []) -> str:
    """Removes accents and spaces from a given string."""
    if isinstance(string, bytes):
        string = string.decode("utf-8")
    s = remove_accents(string)
    ss = ""

    preserve_list = ["\n"] + preserve_chars
    isalnum = re.compile(r"[a-zA-Z0-9]").fullmatch
    for c in s:
        if isalnum(c):
            ss += c
        elif c in preserve_list:
            ss += c
        else:
            ss += "_"
    if strip:
        b, e = 0, len(ss)
        while b < len(ss) and ss[b] == "_":
            b += 1
        while e > 1 and ss[e - 1] == "_":
            e -= 1
        ss = ss[b:e]
    return ss


def main():
    parser = argparse.ArgumentParser(__doc__.strip())

    # Input filenames.
    parser.add_argument("filenames", nargs="+", help="Filenames")

    # Actions.
    group = parser.add_argument_group("action")
    group.add_argument(
        "-c",
        "--clean-filename",
        action="store_true",
        help="Clean the filename (default action).",
    )
    group.add_argument(
        "-d",
        "--insert-date",
        action="store_true",
        help="Insert a date in front of the filename.",
    )
    group.add_argument(
        "-i",
        "--insert-string",
        action="store",
        help="String to insert after the date.",
    )

    # Disabling.
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        help="don't actually move files, " "just print what you would do instead",
    )
    parser.add_argument(
        "-E",
        "--keep-extension",
        action="store_true",
        help="Do not idify the file extension.",
    )
    parser.add_argument(
        "-D",
        "--keep-spaced-dashes",
        action="store_true",
        help="Keep dashes with spacing around them.",
    )

    args = parser.parse_args()
    if args.dry_run:
        logging.getLogger().setLevel(level=logging.INFO)

    if not (args.clean_filename or args.insert_date or args.insert_string):
        args.clean_filename = True

    for filename in args.filenames:
        filename = path.abspath(filename)
        dirname, basename = path.split(filename)

        # Idify the portion of the filename we care about.
        ext = None
        if args.keep_extension:
            rbasename = basename
        else:
            rbasename, ext = splitext_safe(basename)

        if args.clean_filename:
            ibasename = idify(rbasename, True, ["-"])
        else:
            ibasename = rbasename
        if ext is not None:
            ibasename += ext

        # Replace idified spaced dashes.
        if not args.keep_spaced_dashes:
            ibasename = ibasename.replace("_-_", "-")

        # Optionally insert a prefix.
        if args.insert_string:
            ibasename = f"{args.insert_string}.{ibasename}"

        # Optionally insert a date.
        if args.insert_date:
            mtime = path.getmtime(filename)
            fdate = datetime.datetime.fromtimestamp(mtime).date()

            match = re.match(r"(\d{4})-(\d{2})-(\d{2})", basename)
            if match:
                fndate = datetime.date(*map(int, match.groups()))
                if fndate != fdate:
                    logging.warning("File '%s' is already dated with a different date "
                                    "than %s; skipping dating.", filename, fdate)
            else:
                ibasename = f"{fdate:%Y-%m-%d}.{ibasename}"

        ifilename = path.join(dirname, ibasename)

        # Perform the name (or print).
        if ifilename == filename:
            logging.info("File '%s' rename is identity.", filename)
        elif not args.dry_run:
            os.rename(filename, ifilename)
        else:
            print(filename, ifilename)


if __name__ == "__main__":
    main()
